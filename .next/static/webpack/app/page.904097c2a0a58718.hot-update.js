"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api)\n/* harmony export */ });\nconst API_BASE_URL = 'https://qe-api.services.staging.cloudwalk.network';\nconst api = {\n    async getBalance (userId) {\n        console.log('API: Buscando saldo para userId:', userId);\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/users/\").concat(userId), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                console.error('API: Erro ao buscar saldo:', response.status, response.statusText);\n                throw new Error('Failed to fetch balance');\n            }\n            const data = await response.json();\n            console.log('API: Saldo obtido:', data);\n            return data.balance;\n        } catch (error) {\n            console.error('API: Erro na chamada getBalance:', error);\n            throw error;\n        }\n    },\n    async setBalance (data) {\n        console.log('API: Atualizando saldo:', data);\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/users/set-balance\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                console.error('API: Erro ao atualizar saldo:', response.status, response.statusText);\n                throw new Error('Failed to set balance');\n            }\n            const result = await response.json();\n            console.log('API: Saldo atualizado com sucesso:', result);\n            return result;\n        } catch (error) {\n            console.error('API: Erro na chamada setBalance:', error);\n            throw error;\n        }\n    },\n    async updateBalancesAfterTransaction (senderId, receiverId, amount) {\n        console.log('API: Iniciando atualização de saldos:', {\n            senderId,\n            receiverId,\n            amount\n        });\n        try {\n            // Get current balances\n            const senderBalance = await this.getBalance(senderId);\n            const receiverBalance = await this.getBalance(receiverId);\n            console.log('API: Saldos atuais:', {\n                senderBalance,\n                receiverBalance\n            });\n            // Update sender's balance (subtract amount)\n            const newSenderBalance = senderBalance - amount;\n            await this.setBalance({\n                user_id: senderId,\n                balance: newSenderBalance\n            });\n            // Update receiver's balance (add amount)\n            await this.setBalance({\n                user_id: receiverId,\n                balance: receiverBalance + amount\n            });\n            // Return updated balances\n            const updatedSenderBalance = await this.getBalance(senderId);\n            const updatedReceiverBalance = await this.getBalance(receiverId);\n            console.log('API: Saldos atualizados:', {\n                updatedSenderBalance,\n                updatedReceiverBalance\n            });\n            return {\n                senderBalance: updatedSenderBalance,\n                receiverBalance: updatedReceiverBalance\n            };\n        } catch (error) {\n            console.error('API: Erro ao atualizar saldos:', error);\n            throw error;\n        }\n    },\n    async transferMoney (data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/pay/pos\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error('Transfer failed');\n        }\n        return response.json();\n    },\n    async transferPix (data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/pay/pix\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error('PIX transfer failed');\n        }\n        return response.json();\n    },\n    async payLink (data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/pay/link\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error('Link payment failed');\n        }\n        return response.json();\n    },\n    async cardPayment (data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/pay/card\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error('Card payment failed');\n        }\n        return response.json();\n    },\n    async createReceivable (data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/receivables\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error('Failed to create receivable');\n        }\n        return response.json();\n    },\n    async getUserInfo (identifier) {\n        // Se for um número, usa o endpoint /users/{id}\n        if (!isNaN(Number(identifier))) {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/users/\").concat(identifier), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error('Failed to get user info');\n            }\n            return response.json();\n        }\n        // Se não for número, tenta criar um usuário com esse handle\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/users/new\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                handle: identifier\n            })\n        });\n        const data = await response.json();\n        // Se o handle já existe, retorna erro\n        if (data.error && data.error.includes('handle has already been taken')) {\n            throw new Error('Handle already exists');\n        }\n        // Se não for erro de handle existente, verifica se a resposta está ok\n        if (!response.ok) {\n            throw new Error('Failed to get user info');\n        }\n        return data;\n    },\n    async createUser (data) {\n        try {\n            const response = await fetch('https://qe-api.services.staging.cloudwalk.network/users/new', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            const res = await response.json();\n            // Se o handle já existe, tenta criar com um sufixo aleatório\n            if (res.error && res.error.includes('handle has already been taken')) {\n                const newHandle = \"\".concat(data.handle).concat(Math.floor(Math.random() * 1000));\n                return this.createUser({\n                    handle: newHandle\n                });\n            }\n            if (!response.ok) {\n                console.error('Erro ao criar usuário:', res);\n                throw new Error(res.message || 'Erro ao criar usuário');\n            }\n            return res;\n        } catch (err) {\n            console.error('Erro de rede ao criar usuário:', err);\n            throw err;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});